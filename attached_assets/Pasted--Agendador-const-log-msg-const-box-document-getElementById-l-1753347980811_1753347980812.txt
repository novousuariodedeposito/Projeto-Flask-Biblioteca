// ---------- Agendador ----------
const log = (msg) => {
  const box = document.getElementById("log");
  box.innerHTML += `[${new Date().toLocaleTimeString()}] ${msg}<br>`;
  box.scrollTop = box.scrollHeight;
};

let sentToday = new Set();

function startScheduler() {
  const token = document.getElementById("token").value.trim();
  const channelId = document.getElementById("channelId").value.trim();
  const message = document.getElementById("message").value.trim();
  const timeInputs = document.querySelectorAll(".time");

  const times = Array.from(timeInputs)
    .map(input => input.value.trim())
    .filter(t => t.length === 5);

  if (!token || !channelId || !message || times.length === 0) {
    alert("Preencha todos os campos obrigatórios!");
    return;
  }

  log("✅ Agendador iniciado...");

  setInterval(() => {
    const now = new Date();
    const hhmm = now.toTimeString().slice(0, 5);

    times.forEach(time => {
      const tag = `${time}-${channelId}`;
      if (hhmm === time && !sentToday.has(tag)) {
        sendMessage(token, channelId, message);
        sentToday.add(tag);
      }
    });

    if (hhmm === "00:00") {
      sentToday.clear();
      log("🔁 Reset diário de agendamentos");
    }
  }, 30 * 1000);
}

function sendMessage(token, channelId, content) {
  fetch(`https://discord.com/api/v10/channels/${channelId}/messages`, {
    method: "POST",
    headers: {
      "Authorization": token,
      "Content-Type": "application/json"
    },
  })
    .then(res => {
      if (res.ok) {
        log(`✅ Mensagem enviada para ${channelId}: "${content}"`);
      } else {
        res.text().then(text => {
          log(`❌ Erro ${res.status}: ${text}`);
        });
      }
    })
    .catch(err => {
      log(`❌ Erro de rede: ${err.message}`);
    });
}

// ---------- Roteamento ----------
const sections = ['home', 'agendador', 'dm'];

function setActiveRoute(route) {
  sections.forEach(id => {
    const el = document.getElementById(id);
    if (el) el.classList.add('hidden');
  });

  const activeSection = document.getElementById(route);
  if (activeSection) activeSection.classList.remove('hidden');

  document.querySelectorAll('.nav-btn').forEach(btn => {
    btn.classList.remove('active');
    if (btn.getAttribute('href') === `#${route}`) {
      btn.classList.add('active');
    }
  });
}

function handleHashChange() {
  const route = window.location.hash.replace('#', '') || 'home';
  setActiveRoute(route);
}

window.addEventListener('hashchange', handleHashChange);
window.addEventListener('load', handleHashChange);

// ---------- Campos Dinâmicos ----------
const MAX_TIME_FIELDS = 50;
const MAX_TOKENS = 50;

function addTimeField() {
  const container = document.getElementById("timeFields");
  const currentFields = container.querySelectorAll(".time-entry").length;

  if (currentFields >= MAX_TIME_FIELDS) {
    alert("Limite máximo de 50 horários atingido.");
    return;
  }

  const entry = document.createElement("div");
  entry.className = "time-entry";
  entry.innerHTML = `
    <input type="time" class="time" />
    <button type="button" class="remove-time" onclick="removeTimeField(this)">🗑</button>
  `;
  container.appendChild(entry);
}

function removeTimeField(button) {
  button.parentElement.remove();
}

function addTokenField() {
  const container = document.getElementById("tokenFields");
  const count = container.querySelectorAll(".token-entry").length;

  if (count >= MAX_TOKENS) {
    alert("Limite máximo de 50 tokens atingido.");
    return;
  }

  const entry = document.createElement("div");
  entry.className = "token-entry";
  entry.innerHTML = `
    <input type="text" class="token-input" placeholder="Token da conta">
    <button type="button" class="remove-token" onclick="removeTokenField(this)">🗑</button>
  `;
  container.appendChild(entry);
}

function removeTokenField(button) {
  button.parentElement.remove();
}

// ---------- Utils ----------
function delay(ms) {
  return new Promise(res => setTimeout(res, ms));
}

function getTokens() {
  return Array.from(document.querySelectorAll(".token-input"))
    .map(input => input.value.trim())
    .filter(Boolean);
}

// ---------- Logs ----------
function dmLog(msg) {
  const box = document.getElementById("dmLog");
  box.innerHTML += `[${new Date().toLocaleTimeString()}] ${msg}<br>`;
  box.scrollTop = box.scrollHeight;
}

function joinLog(msg) {
  const box = document.getElementById("joinLog");
  box.innerHTML += `[${new Date().toLocaleTimeString()}] ${msg}<br>`;
  box.scrollTop = box.scrollHeight;
}

// ---------- Enviar DM ----------
async function sendMassDM() {
  const userId = document.getElementById("targetUserId").value.trim();
  const message = document.getElementById("dmMessage").value.trim();
  const tokens = getTokens();

  if (!userId || !message || tokens.length === 0) {
    alert("Preencha todos os campos corretamente.");
    return;
  }

  dmLog(`📨 Iniciando envio de DMs para ${userId}`);

  for (const token of tokens) {
    try {
      const channelRes = await fetch("https://discord.com/api/v10/users/@me/channels", {
        method: "POST",
        headers: {
          "Authorization": token,
          "Content-Type": "application/json"
        },
        body: JSON.stringify({ recipient_id: userId })
      });

      if (!channelRes.ok) {
        const errText = await channelRes.text();
        dmLog(`❌ ${channelRes.status} criando canal | ${token.slice(0, 20)}: ${errText}`);
        continue;
      }

      const data = await channelRes.json();
      const channelId = data.id;

      const msgRes = await fetch(`https://discord.com/api/v10/channels/${channelId}/messages`, {
        method: "POST",
        headers: {
          "Authorization": token,
          "Content-Type": "application/json"
        },
        body: JSON.stringify({ content: message })
      });

      if (msgRes.ok) {
        dmLog(`✅ DM enviada por ${token.slice(0, 20)}...`);
      } else {
        const text = await msgRes.text();
        dmLog(`❌ ${msgRes.status} ao enviar | ${token.slice(0, 20)}: ${text}`);
      }
    } catch (err) {
      dmLog(`❌ Erro: ${err.message}`);
    }

    await delay(1500);
  }

  dmLog("✅ Envio finalizado.");
}

async function joinServer() {
  let inviteCode = document.getElementById("inviteCode").value.trim();

  // Extrai código se usuário colou link completo
  if (inviteCode.includes("discord.gg")) {
    inviteCode = inviteCode.split("/").pop();
  }

  const tokens = getTokens();

  if (!inviteCode || tokens.length === 0) {
    alert("Preencha o código de convite e ao menos 1 token.");
    return;
  }

  joinLog(`🚪 Iniciando entrada no servidor com convite: ${inviteCode}`);

  for (const token of tokens) {
    try {
      const res = await fetch(`https://discord.com/api/v10/invites/${inviteCode}`, {
        method: "POST",
        headers: {
          "Authorization": token

        }
      });

      if (res.ok) {
        joinLog(`✅ Token entrou no servidor: ${token.slice(0, 20)}...`);
      } else {
        const err = await res.text();
        joinLog(`❌ ${res.status} | ${token.slice(0, 20)}: ${err}`);
      }
    } catch (err) {
      joinLog(`❌ Erro de rede | ${token.slice(0, 20)}: ${err.message}`);
    }

    await delay(1500);
  }

  joinLog("✅ Finalizado.");
}


document.querySelectorAll('button').forEach(btn => {
  btn.addEventListener('click', () => {
    btn.style.transform = 'scale(0.96)';
    setTimeout(() => btn.style.transform = 'scale(1)', 120);
  });
});
